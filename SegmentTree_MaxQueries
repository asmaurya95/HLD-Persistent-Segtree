#include<stdio.h>
#include<limits.h>
int max(int l,int r)
{
	if(l>r)
	return l;
	else
	return r;
}
void buildtree(int *tree,int *a,int index,int s,int e)
{
	if(s>e)
	return;
	if(s==e)
	{
		tree[index]=a[s];
		return;
	}
	int mid=(s+e)/2;
	buildtree(tree,a,2*index,s,mid);
	buildtree(tree,a,2*index+1,mid+1,e);
	int left,right;
	left=tree[2*index];
	right=tree[2*index +1];
	tree[index]= max(left,right);
	
}
void nodeupdate(int *tree,int index,int i,int s,int e,int val)
{
if(i>e||i<s)
return;
if(s==e)
{
	tree[index]=val;
	return;
}
int mid=(s+e)/2;
nodeupdate(tree,2*index,i,s,mid,val);
nodeupdate(tree,2*index+1,i,mid+1,e,val);
tree[index]=max(tree[2*index],tree[2*index+1]);
return;
}
void rangeup(int *tree,int index,int s,int e,int l, int r,int inc)
{
	if(e<s  || l> e)
	return;
	if(s==e)
	{
		tree[index]+=inc;
		return;
	}
	int mid=(s+e)/2;
	rangeup(tree,2*index,s,mid,l,r,inc);
	rangeup(tree,2*index+1,mid+1,e,l,r,inc);
	tree[index]=max(tree[2*index],tree[2*index+1]);
	return;
}
int query(int *tree,int index,int s,int e,int qs,int qe)
{
	if(qs>e ||qe<s)
	return INT_MIN;
	if(s>=qs && e<=qe)
	return tree[index];
	int mid=(s+e)/2;
	int left=query(tree,2*index,s,mid,qs,qe);
	int right=query(tree,2*index+1,mid+1,e,qs,qe);
	return max(left,right);
}
int main()
{
	int n;
	printf("Enter the no.of elements:");
	scanf("%d",&n);
	int a[n],i;
	int index=1;
	printf("Enter the elements:");
	for(i=0;i<n;i++)
	scanf("%d",&a[i]);
	int tree[4*n+1];
	buildtree(tree,a,index,0,n-1);
printf("Enter no.of queries:");
int q;
	scanf("%d",&q);
	printf("Type 1 for querying between l and r\nType 2  for updating index I\nType 3 for upding a range l to r\n\n");
		
	
	while(q--)
	{
	int x;
	scanf("%d",&x);
if(x==1)
{
printf("Enter the range L and R:");
	int l,r;
	scanf("%d %d",&l,&r);
	printf("Maximum between %d and %d is %d\n",l,r,query(tree,1,0,n-1,l,r));
}
else if(x==2)
{
	printf("Enter the index and value:");
	int in,v;
	scanf("%d %d",&in,&v);
	nodeupdate(tree,index,in,0,n-1,v);
	printf("Updated\n");
}
else
{
	printf("Enter the range L and R and value:");
	int l,r,v;
	scanf("%d %d %d",&l,&r,&v);
	rangeup(tree,index,0,n-1,l,r,v);
	printf("Updated\n");
}
}
	return 0;
}
